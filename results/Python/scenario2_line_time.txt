Timer unit: 1e-06 s

Total time: 0.235757 s
Function: main at line 41

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    41                                           def main():
    42         1         10.0     10.0      0.0  	cmd = ns.core.CommandLine()
    43         1          2.0      2.0      0.0  	cmd.nCsma = 3
    44         1          1.0      1.0      0.0  	cmd.verbose = "True"
    45         1          1.0      1.0      0.0  	cmd.nWifi = 3
    46         1          1.0      1.0      0.0  	cmd.tracing = "False"
    47                                           
    48         1         14.0     14.0      0.0  	cmd.AddValue("nCsma", "Number of \"extra\" CSMA nodes/devices")
    49         1          3.0      3.0      0.0  	cmd.AddValue("nWifi", "Number of wifi STA devices")
    50         1          4.0      4.0      0.0  	cmd.AddValue("verbose", "Tell echo applications to log if true")
    51         1          3.0      3.0      0.0  	cmd.AddValue("tracing", "Enable pcap tracing")
    52                                           
    53         1         13.0     13.0      0.0  	cmd.Parse(sys.argv)
    54                                           
    55         1          1.0      1.0      0.0  	nCsma = int(cmd.nCsma)
    56         1          1.0      1.0      0.0  	verbose = cmd.verbose
    57         1          2.0      2.0      0.0  	nWifi = int(cmd.nWifi)
    58         1          1.0      1.0      0.0  	tracing = cmd.tracing
    59                                           
    60                                           	# The underlying restriction of 18 is due to the grid position
    61                                           	# allocator's configuration; the grid layout will exceed the
    62                                           	# bounding box if more than 18 nodes are provided.
    63         1          1.0      1.0      0.0  	if nWifi > 18:
    64                                           		print ("nWifi should be 18 or less; otherwise grid layout exceeds the bounding box")
    65                                           		sys.exit(1)
    66                                           
    67         1          1.0      1.0      0.0  	if verbose == "True":
    68         1         51.0     51.0      0.0  		ns.core.LogComponentEnable("UdpEchoClientApplication", ns.core.LOG_LEVEL_INFO)
    69         1         16.0     16.0      0.0  		ns.core.LogComponentEnable("UdpEchoServerApplication", ns.core.LOG_LEVEL_INFO)
    70                                           
    71         1         11.0     11.0      0.0  	p2pNodes = ns.network.NodeContainer()
    72         1        111.0    111.0      0.0  	p2pNodes.Create(2)
    73                                           
    74         1         11.0     11.0      0.0  	pointToPoint = ns.point_to_point.PointToPointHelper()
    75         1         29.0     29.0      0.0  	pointToPoint.SetDeviceAttribute("DataRate", ns.core.StringValue("5Mbps"))
    76         1         20.0     20.0      0.0  	pointToPoint.SetChannelAttribute("Delay", ns.core.StringValue("2ms"))
    77                                           
    78         1        181.0    181.0      0.1  	p2pDevices = pointToPoint.Install(p2pNodes)
    79                                           
    80         1          5.0      5.0      0.0  	csmaNodes = ns.network.NodeContainer()
    81         1         15.0     15.0      0.0  	csmaNodes.Add(p2pNodes.Get(1))
    82         1         31.0     31.0      0.0  	csmaNodes.Create(nCsma)
    83                                           
    84         1         10.0     10.0      0.0  	csma = ns.csma.CsmaHelper()
    85         1         14.0     14.0      0.0  	csma.SetChannelAttribute("DataRate", ns.core.StringValue("100Mbps"))
    86         1         82.0     82.0      0.0  	csma.SetChannelAttribute("Delay", ns.core.TimeValue(ns.core.NanoSeconds(6560)))
    87                                           
    88         1      21309.0  21309.0      9.0  	csmaDevices = csma.Install(csmaNodes)
    89                                           
    90         1          5.0      5.0      0.0  	wifiStaNodes = ns.network.NodeContainer()
    91         1         32.0     32.0      0.0  	wifiStaNodes.Create(nWifi)
    92         1          3.0      3.0      0.0  	wifiApNode = p2pNodes.Get(0)
    93                                           
    94         1         36.0     36.0      0.0  	channel = ns.wifi.YansWifiChannelHelper.Default()
    95         1         14.0     14.0      0.0  	phy = ns.wifi.YansWifiPhyHelper.Default()
    96         1         36.0     36.0      0.0  	phy.SetChannel(channel.Create())
    97                                           
    98         1         16.0     16.0      0.0  	wifi = ns.wifi.WifiHelper()
    99         1          7.0      7.0      0.0  	wifi.SetRemoteStationManager("ns3::AarfWifiManager")
   100                                           
   101         1         12.0     12.0      0.0  	mac = ns.wifi.WifiMacHelper()
   102         1          8.0      8.0      0.0  	ssid = ns.wifi.Ssid ("ns-3-ssid")
   103                                           
   104         1         40.0     40.0      0.0  	mac.SetType ("ns3::StaWifiMac", "Ssid", ns.wifi.SsidValue(ssid), "ActiveProbing", ns.core.BooleanValue(False))
   105         1       2475.0   2475.0      1.0  	staDevices = wifi.Install(phy, mac, wifiStaNodes)
   106                                           
   107         1         22.0     22.0      0.0  	mac.SetType("ns3::ApWifiMac","Ssid", ns.wifi.SsidValue (ssid))
   108         1        835.0    835.0      0.4  	apDevices = wifi.Install(phy, mac, wifiApNode)
   109                                           
   110         1         78.0     78.0      0.0  	mobility = ns.mobility.MobilityHelper()
   111         2         38.0     19.0      0.0  	mobility.SetPositionAllocator ("ns3::GridPositionAllocator", "MinX", ns.core.DoubleValue(0.0), 
   112         1          3.0      3.0      0.0  						"MinY", ns.core.DoubleValue (0.0), "DeltaX", ns.core.DoubleValue(5.0), "DeltaY", ns.core.DoubleValue(10.0), 
   113         1          6.0      6.0      0.0  		 "GridWidth", ns.core.UintegerValue(3), "LayoutType", ns.core.StringValue("RowFirst"))
   114                                           		 
   115         1         18.0     18.0      0.0  	mobility.SetMobilityModel ("ns3::RandomWalk2dMobilityModel", "Bounds", ns.mobility.RectangleValue(ns.mobility.Rectangle (-50, 50, -50, 50)))
   116         1        190.0    190.0      0.1  	mobility.Install(wifiStaNodes)
   117                                           
   118         1          4.0      4.0      0.0  	mobility.SetMobilityModel("ns3::ConstantPositionMobilityModel")
   119         1          7.0      7.0      0.0  	mobility.Install(wifiApNode)
   120                                           
   121         1         28.0     28.0      0.0  	stack = ns.internet.InternetStackHelper()
   122         1       1697.0   1697.0      0.7  	stack.Install(csmaNodes)
   123         1        425.0    425.0      0.2  	stack.Install(wifiApNode)
   124         1       1156.0   1156.0      0.5  	stack.Install(wifiStaNodes)
   125                                           
   126         1         10.0     10.0      0.0  	address = ns.internet.Ipv4AddressHelper()
   127         1         12.0     12.0      0.0  	address.SetBase(ns.network.Ipv4Address("10.1.1.0"), ns.network.Ipv4Mask("255.255.255.0"))
   128         1        251.0    251.0      0.1  	p2pInterfaces = address.Assign(p2pDevices)
   129                                           
   130         1          9.0      9.0      0.0  	address.SetBase(ns.network.Ipv4Address("10.1.2.0"), ns.network.Ipv4Mask("255.255.255.0"))
   131         1        490.0    490.0      0.2  	csmaInterfaces = address.Assign(csmaDevices)
   132                                           
   133         1          9.0      9.0      0.0  	address.SetBase(ns.network.Ipv4Address("10.1.3.0"), ns.network.Ipv4Mask("255.255.255.0"))
   134         1        359.0    359.0      0.2  	address.Assign(staDevices)
   135         1        119.0    119.0      0.1  	address.Assign(apDevices)
   136                                           
   137         1         16.0     16.0      0.0  	echoServer = ns.applications.UdpEchoServerHelper(9)
   138                                           
   139         1         50.0     50.0      0.0  	serverApps = echoServer.Install(csmaNodes.Get(nCsma))
   140         1         32.0     32.0      0.0  	serverApps.Start(ns.core.Seconds(1.0))
   141         1          7.0      7.0      0.0  	serverApps.Stop(ns.core.Seconds(10.0))
   142                                           
   143         1         33.0     33.0      0.0  	echoClient = ns.applications.UdpEchoClientHelper(csmaInterfaces.GetAddress(nCsma), 9)
   144         1          8.0      8.0      0.0  	echoClient.SetAttribute("MaxPackets", ns.core.UintegerValue(1))
   145         1         67.0     67.0      0.0  	echoClient.SetAttribute("Interval", ns.core.TimeValue(ns.core.Seconds (1.0)))
   146         1          7.0      7.0      0.0  	echoClient.SetAttribute("PacketSize", ns.core.UintegerValue(1024))
   147                                           
   148         1         49.0     49.0      0.0  	clientApps = echoClient.Install(wifiStaNodes.Get (nWifi - 1))
   149         1         11.0     11.0      0.0  	clientApps.Start(ns.core.Seconds(2.0))
   150         1          7.0      7.0      0.0  	clientApps.Stop(ns.core.Seconds(10.0))
   151                                           
   152         1        626.0    626.0      0.3  	ns.internet.Ipv4GlobalRoutingHelper.PopulateRoutingTables()
   153                                           
   154         1         20.0     20.0      0.0  	ns.core.Simulator.Stop(ns.core.Seconds(10.0))
   155                                           
   156         1          2.0      2.0      0.0  	if tracing == "True":
   157                                           		pointToPoint.EnablePcapAll ("third")
   158                                           		phy.EnablePcap ("third", apDevices.Get (0))
   159                                           		csma.EnablePcap ("third", csmaDevices.Get (0), True)
   160                                           
   161         1     200496.0 200496.0     85.0  	ns.core.Simulator.Run()
   162         1       3921.0   3921.0      1.7  	ns.core.Simulator.Destroy()
